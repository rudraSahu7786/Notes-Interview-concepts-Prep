1Ô∏è‚É£ Difference between JDK, JRE, and JVM?
2Ô∏è‚É£ How does Java achieve platform independence?
3Ô∏è‚É£ What are checked and unchecked exceptions? Give examples.
4Ô∏è‚É£ Difference between String, StringBuilder, and StringBuffer?
5Ô∏è‚É£ What is the difference between final, finally, and finalize()?


6Ô∏è‚É£ Explain the concept of Garbage Collection in Java.
7Ô∏è‚É£ What is the difference between ArrayList and LinkedList?
8Ô∏è‚É£ What is ConcurrentHashMap and how is it different from HashMap?
Question : Implement lru using linkedhashmap
9Ô∏è‚É£ Explain thread lifecycle in Java.
NEW --> RUNNABLE --> RUNNING --> WAITING / TIMED_WAITING / BLOCKED --> RUNNABLE --> RUNNING --> TERMINATED

üîü How do you create a thread in Java? Difference between extending Thread and implementing Runnable?
1Ô∏è‚É£1Ô∏è‚É£ What is the use of the volatile keyword in Java multithreading?-> visibility + not thread safe(not atomic)
1Ô∏è‚É£1Ô∏è‚É£ What is the use of the Atomic keyword in Java multithreading?-> visibility+atomocity(thread safe)
1Ô∏è‚É£2Ô∏è‚É£ Explain the difference between REST and SOAP web services.
1Ô∏è‚É£3Ô∏è‚É£ How does Spring Dependency Injection work?
1Ô∏è‚É£4Ô∏è‚É£ What are Spring Boot starters?

‚öôÔ∏è Internally (Step-by-step when app starts):

@SpringBootApplication triggers component scanning.

Spring Boot finds Engine and Car (annotated with @Component).

Creates beans and puts them in the ApplicationContext.

When creating Car, it sees the constructor requires Engine.

Injects Engine bean automatically.

You use Car without creating it yourself.
Question: How does Springboot Dependency Injection work?
Question: explain different layers in springboot.
Client ‚Üí Controller/web layer(have rest api) ‚Üí Service(have business logic needed for rest api) ‚Üí Repository(it gets and connect to db to get dta) ‚Üí Database/model/entity(blueprint of database tables)

1Ô∏è‚É£5Ô∏è‚É£ Explain @Component, @Service, @Repository and @Autowired annotations in Spring.
@Component-> normal bean in springboot
@Service -> bean having business logic
@Autowired-> automatically injects Dependency to the bean

1Ô∏è‚É£6Ô∏è‚É£ How do you handle transactions in Spring Boot?
Use @Transactional on service layer methods.
Spring manages commit/rollback automatically.
Default: rollback on runtime exceptions, commit otherwise.
Can customize isolation, propagation, rollback behavior.

1Ô∏è‚É£7Ô∏è‚É£ Explain CI/CD pipeline ‚Äì how did you implement it in your project?
Developer Commit ‚Üí Git ‚Üí Jenkins/GitHub Actions ‚Üí Build (maven)‚Üí Test(unit test erun using junit) ‚Üí Dockerize ‚Üí Push to Registry ‚Üí Deploy (Use kubernetes/EC2/VM) to stage‚Üí Deploy (Use kubernetes/EC2/VM) to production->Monitor(grafana)
This ensured faster delivery, automated testing, and reliable deployments.‚Äù

1Ô∏è‚É£8Ô∏è‚É£ What is Kubernetes and how is it different from Docker?
Kubernetes is a container orchestration platform.
It manages multiple containers (often running in Docker).
Provides:
    Auto-scaling (scale pods up/down)
    Load balancing
    Self-healing (restart failed containers)
    Rolling updates & rollbacks
    Service discovery

üëâ Think of Kubernetes as the ‚Äúport authority managing thousands of shipping containers‚Äù.
1Ô∏è‚É£9Ô∏è‚É£ How do you secure REST APIs in Spring Boot?
‚ÄúIn my projects, we secured REST APIs in Spring Boot using Spring Security with JWT-based authentication and role-based authorization. We enforced HTTPS for all requests, validated inputs to prevent injection attacks, and configured CORS properly. Additionally, we used API Gateway with rate limiting to protect against abuse. For sensitive endpoints, we applied method-level security with @PreAuthorize. This ensured both authentication and fine-grained authorization.‚Äù
***Authentication & Authorization- Spring Security.-(JWT or OAuth2)
*** HTTPS
***Role-Based Access Control (RBAC)- Use @PreAuthorize, @Secured, or method-level security
***Input Validation & Sanitization
***CORS (Cross-Origin Resource Sharing)
***Rate Limiting / Throttling- Bucket4j, Spring Cloud Gateway
***Exception & Error Handling- Return proper error codes (401 Unauthorized, 403 Forbidden).




‚úÖ Stream API Programming Questions:
1) Write a Stream program to get employee names whose age is greater than 26
2) Write a Stream program to group employees based on their department
3) Write a Stream program to convert employee names to uppercase
3a) Write a Stream program to find the highest salary among all employees
3b) Write a Stream program to get employees with more than 5 years of experience
3c) Write a Stream program to count employees in each department

‚úÖ Project & Technical Questions:
4) Tell me about your project experience?
5) What are all the methods available in the Object class?
6) How do you handle global exceptions in Spring Boot?
7) What are all the Spring annotations you have used in your projects?
8) What is a Garbage Collector, and how does it work?
9) Are you familiar with Swagger API documentation?
10) Are you familiar with logging frameworks?
11) Are you familiar with Spring Security?
12) How do you implement Spring Security in a Java application?
13) Explain about JWT tokens, refresh tokens, and role-based access controls?
14) Do you have experience with microservices?
15) How do you handle communication between two microservices?
16) Have you implemented any fault-tolerance design patterns in your projects?
17) How does service discovery work in the Microservices Architecture?

üéØ Tips for Aspiring Java Developers:
1) Practice Stream API and Java 8+ features deeply.
2) Get hands-on with Spring Boot, security, logging, and exception handling.
3) If you haven‚Äôt had the opportunity to work with microservices architecture in your professional projects, consider building real-world mini-projects that demonstrate your implementation skills. During interviews, be transparent about your professional experience while highlighting your hands-on work with microservices in personal projects.

Focus on writing clean, testable, and modular code
